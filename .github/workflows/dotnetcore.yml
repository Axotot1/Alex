name: .NET Core

on:
  push:
    branches: master

jobs:
  linux:
    name: Build Linux

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    
    - name: Get short SHA
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        
    - name: Install dependencies
      run: dotnet restore
      working-directory: src/Alex
      
    - name: Build
      run: dotnet publish --configuration Release --no-restore -o "build-linux" --version-suffix ${{steps.vars.outputs.sha_short}} -r linux-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:IncludeAllContentForselfExtract=true /p:PublishReadyToRun=true
      working-directory: src/Alex

    - name: Set executable permissions
      working-directory: src/Alex/build-linux
      run: chmod +x Alex

    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: Linux Binaries
        # Directory containing files to upload
        path: "src/Alex/build-linux"

  windows:
    name: Build Windows (OpenGL)

    runs-on: [windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    
    - name: Get short SHA
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        
    - name: Install dependencies
      run: dotnet restore
      working-directory: src/Alex
      
    - name: Build
      run: dotnet publish --configuration Release --no-restore -o /build-win --version-suffix ${{steps.vars.outputs.sha_short}} -r win-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:IncludeAllContentForselfExtract=true /p:PublishReadyToRun=true
      working-directory: src/Alex

    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: Windows OpenGL
        # Directory containing files to upload
        path: /build-win

  directx:
    name: Build Windows (DirectX)

    runs-on: [windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    
    - name: Get short SHA
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        
    - name: Install dependencies
      run: dotnet restore
      working-directory: src/Alex
      
    - name: Build
      run: dotnet publish --configuration DirectX --no-restore -o /build-win --version-suffix ${{steps.vars.outputs.sha_short}} -r win10-x64 /p:DefineConstants=DIRECTX /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:IncludeAllContentForselfExtract=true /p:PublishReadyToRun=true
      working-directory: src/Alex

    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: Windows DirectX
        # Directory containing files to upload
        path: /build-win

  osx:
    name: Build MacOS

    runs-on: [macos-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    
    - name: Get short SHA
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        
    - name: Install dependencies
      run: dotnet restore
      working-directory: src/Alex
      
    - name: Build
      run: dotnet publish --configuration Release --no-restore -o "build-osx" --version-suffix ${{steps.vars.outputs.sha_short}} -r osx-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:IncludeAllContentForselfExtract=true /p:PublishReadyToRun=true
      working-directory: src/Alex

    - name: Set executable permissions
      working-directory: src/Alex/build-osx
      run: chmod +x Alex

    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        # Artifact name
        name: Mac OS binaries
        # Directory containing files to upload
        path: "src/Alex/build-osx"
