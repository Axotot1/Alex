using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Alex.API.Utils;
using Alex.Blocks.Minecraft;
using Alex.Utils.Queue;
using Alex.Worlds.Chunks;
using NLog;

namespace Alex.Worlds.Lighting
{
    public class BlockLightCalculations : IDisposable
    {
        private static readonly ILogger Log = LogManager.GetCurrentClassLogger(typeof(BlockLightCalculations));
        //private static ConcurrentQueue<(BlockCoordinates coords, Func<bool> action)> Queue { get; } = new ConcurrentQueue<(BlockCoordinates coords, Func<bool> action)>();
		private static ConcurrentDictionary<ChunkCoordinates, ConcurrentQueue<BlockCoordinates>> ChunkQueues       { get; } = new ConcurrentDictionary<ChunkCoordinates, ConcurrentQueue<BlockCoordinates>>();

		private ConcurrentPriorityQueue<BlockCoordinates, double> Queue             { get; } = new ConcurrentPriorityQueue<BlockCoordinates, double>(Comparer<double>.Default);
        private World                                             World             { get; }
        private CancellationToken                                 CancellationToken { get; }
        public BlockLightCalculations(World level, CancellationToken cancellationToken)
        {
	        World = level;
	        CancellationToken = cancellationToken;
        }

        public void Remove(ChunkCoordinates coordinates)
        {
	        ChunkQueues.TryRemove(coordinates, out _);
        }

        public void Clear()
        {
	        ChunkQueues.Clear();
	      //  Queue.Clear();
        }
        
        public bool HasEnqueued(ChunkCoordinates coordinates)
        {
	        if (ChunkQueues.TryGetValue(coordinates, out var queue))
	        {
		        return !queue.IsEmpty;
	        }

	        return false;
        }

        public void Recalculate(ChunkColumn chunk)
        {
	        ChunkQueues.TryRemove(new ChunkCoordinates(chunk.X, chunk.Z), out _);
	      //  var lightSources = chunk.GetLightSources().ToArray();

	        foreach (var section in chunk.Sections)
	        {
		        section?.ResetLight(true, false);
		        section?.RemoveInvalidBlocks();
	        }
	        
	        var chunkpos = new BlockCoordinates(chunk.X << 4, 0, chunk.Z << 4);
	        foreach (var lightsource in chunk.GetLightSources().OrderByDescending(x => x.Y))
	        {
		        Enqueue(chunkpos + lightsource);
	        }
	        //chunk.GetLightSources()
        }
        
        public bool Process()
        {
	        int count = 0;
	        if (Queue.TryDequeue(out var coords))
	        {
		        ProcessNode(World, coords, null);
		        count++;
	        }

	        return count > 0;
        }

        public void Enqueue(BlockCoordinates coordinates)
        {
	        if (!Queue.Contains(coordinates))
	        {
		        Queue.Enqueue(coordinates, Math.Abs(new ChunkCoordinates(coordinates).Distance));
	        }
        }
        
       private bool GetHeighestNeighbor(World level,
	       BlockCoordinates block,
	       out BlockCoordinates position,
	       out byte lightLevel)
       {
	       lightLevel = 0;

	       byte             lvl    = 0;
	       BlockCoordinates result = block;
	       
	       void test(BlockCoordinates p, ref BlockCoordinates r, ref byte l)
	       {
		       if (level.TryGetBlockLight(p, out var up) && up >= l)
		       {
			       l = up;
			       r = p;
		       }
	       }
	       
	       test(block.BlockUp(), ref result, ref lvl);
	       test(block.BlockDown(), ref result, ref lvl);
	       test(block.BlockWest(), ref result, ref lvl);
	       test(block.BlockEast(), ref result, ref lvl);
	       test(block.BlockSouth(), ref result, ref lvl);
	       test(block.BlockNorth(), ref result, ref lvl);
	       
	       position = result;
	       lightLevel = lvl;

	       return result != block;
       }
       
        private void ProcessNode(World level, BlockCoordinates coord, Queue<BlockCoordinates> lightBfsQueue)
		{
			if (level.TryGetBlockLight(coord, out var lightLevel))
			{
				Test(level, coord, coord.BlockUp(), lightLevel, lightBfsQueue);
				Test(level, coord, coord.BlockDown(), lightLevel, lightBfsQueue);
				Test(level, coord, coord.BlockWest(), lightLevel, lightBfsQueue);
				Test(level, coord, coord.BlockEast(), lightLevel, lightBfsQueue);
				Test(level, coord, coord.BlockSouth(), lightLevel, lightBfsQueue);
				Test(level, coord, coord.BlockNorth(), lightLevel, lightBfsQueue);
			}
		}
        
        private void Test(World level, BlockCoordinates sourceBlock, BlockCoordinates target, int lightLevel, Queue<BlockCoordinates> lightBfsQueue)
		{
			var chunkCoord = new ChunkCoordinates(sourceBlock);
			//Interlocked.Add(ref touches, 1);

			bool isOtherChunk = false;
			var newChunkCoord = (ChunkCoordinates) target;
			if (chunkCoord.X != newChunkCoord.X || chunkCoord.Z != newChunkCoord.Z)
			{
				//chunk = GetChunk(level, newCoord);
				//lightBfsQueue =
				//	ChunkQueues.GetOrAdd(newChunkCoord, coordinates => new ConcurrentQueue<BlockCoordinates>());
					
				isOtherChunk = true;
			}

			if (isOtherChunk)
			{
				if (!World.TryGetBlockLight(target, out _))
				{
					//Enqueue(target);

					return;
				}
				//else
				//{
					
				//}
				/*Queue.Enqueue((newCoord, () =>
				{
					if (ChunkQueues.TryGetValue((ChunkCoordinates) newCoord, out var queue))
					{
						if (!level.TryGetBlockLight(coord, out var ll))
						{
							return false;
						}
						//var cc = GetChunk(level, newCoord);
						//if (cc == null)
						//	return false;

						//var ll = level.GetBlockLight(coord);
						
						DoPass(level, newCoord, queue, ll);
						
						Enqueue(coord);
						Enqueue(newCoord);

						return true;
					}

					return false;
				}));*/
				
				//return;
			}
			
			/*if (lightLevel > 0)
			{
				GetHeighestNeighbor(level, sourceBlock, out var neighbor, out var neighborLight);
				
				//if (neighbor != coord)
				{
					if (neighborLight <= lightLevel)
					{
						var self              = level.GetBlockState(sourceBlock);
						var selfIsLightSource = self.Block.LightValue > 0;

						if (!selfIsLightSource)
						{
							World.SetBlockLight(sourceBlock, (byte) Math.Max(neighborLight - 1, 0));

							if (neighbor != sourceBlock && neighborLight - 1 > 0)
							{
								Enqueue(neighbor);
							}

							return;
						}
					}
				}
			}*/

			DoPass(level, target, lightLevel, lightBfsQueue);
		}

		private void DoPass(World level, BlockCoordinates target, int lightLevel, Queue<BlockCoordinates> lightBfsQueue)
		{
			var block = level.GetBlockState(target).Block;// chunk.GetBlockState(newCoord.X & 0x0f, newCoord.Y & 0xff, newCoord.Z & 0x0f).Block;

			if (!block.Renderable || block.BlockMaterial == Material.Air) 
			{
				SetLightLevel(target, lightLevel);
			}
			else
			{
				SetLightLevel(level, target, level.GetBlockLight(target), (Block) block, lightLevel, lightBfsQueue);
			}
		}

		private void UpdateNeighbors(World world, BlockCoordinates coordinates, Queue<BlockCoordinates> lightBfsQueue)
		{
			//var source = new BlockCoordinates(x, y, z);

			world.ScheduleBlockUpdate(new BlockCoordinates(coordinates.X + 1, coordinates.Y, coordinates.Z));
			world.ScheduleBlockUpdate(new BlockCoordinates(coordinates.X - 1, coordinates.Y, coordinates.Z));

			world.ScheduleBlockUpdate(new BlockCoordinates(coordinates.X, coordinates.Y, coordinates.Z + 1));
			world.ScheduleBlockUpdate(new BlockCoordinates(coordinates.X, coordinates.Y, coordinates.Z - 1));

			world.ScheduleBlockUpdate(new BlockCoordinates(coordinates.X, coordinates.Y + 1, coordinates.Z));
			world.ScheduleBlockUpdate(new BlockCoordinates(coordinates.X, coordinates.Y - 1, coordinates.Z));
		}
		
		private void SetLightLevel(World world, BlockCoordinates coordinates, int currentLightLevel, Block block, int lightLevel, Queue<BlockCoordinates> lightBfsQueue)
		{
			if (currentLightLevel > 0)
			{
				if (currentLightLevel >= lightLevel)
				{
					return;
				}
				
				SetBlockLight(coordinates, (byte) Math.Max(currentLightLevel, lightLevel - 1));
				
				//UpdateNeighbors(world, coordinates);
				
				return;
			}

			if ((!block.Solid || block.Transparent) && currentLightLevel + 2 <= lightLevel)
			{
				SetBlockLight(coordinates,  (byte) (lightLevel - 1));
				
				//UpdateNeighbors(world, coordinates);
				Enqueue(coordinates);
			}
		}

		private void SetLightLevel(BlockCoordinates coord, int lightLevel)
		{
			var val = World.GetBlockLight(coord);
			if (val + 2 <= lightLevel)
			{
				//chunk.SetBlocklight(coord.X & 0x0f, coord.Y & 0xff, coord.Z & 0x0f, (byte) (lightLevel - 1));
				SetBlockLight(coord, (byte) (lightLevel - 1));
				
				//UpdateNeighbors(World, coord);
				
				Enqueue(coord);
			}
			else if (lightLevel < val)
			{
				Enqueue(coord);
			}
		}

		private void SetBlockLight(BlockCoordinates coordinates, byte lightLevel)
		{
			var         chunkCoords = new ChunkCoordinates(coordinates);
			ChunkColumn chunk;

			//if (World.ChunkManager.TryGetChunk(chunkCoords, out chunk))
			{
				World.SetBlockLight(coordinates, lightLevel);
				{
					
				}
			}
		}

		/// <inheritdoc />
		public void Dispose()
		{
			//Queue.Clear();
			ChunkQueues.Clear();
		}
    }
}